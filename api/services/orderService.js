const User = require("../models/User");
const Order = require("../models/Order");
const Product = require("../models/Product");
const OrderDetail = require("../models/OrderDetail");
const Category = require("../models/Category");
const moment = require("moment");
const { Op, where } = require("sequelize");

const getAllOrdersService = async (condition) => {
  try {
    let whereCondition = {};

    if (condition === "ƒê√£ giao h√†ng") {
      whereCondition.status = "ƒê√£ giao h√†ng";
    } else {
      whereCondition.status = {
        [Op.ne]: "ƒê√£ giao h√†ng", // T·∫•t c·∫£ tr·ª´ "ƒê√£ giao h√†ng"
      };
    }

    const orders = await Order.findAll({
      where: whereCondition,
      include: [
        {
          model: User,
          attributes: ["id", "username", "email", "phone", "address"], // Ch·ªâ l·∫•y th√¥ng tin c·∫ßn thi·∫øt
        },
      ],
      order: [["order_date", "DESC"]], // S·∫Øp x·∫øp ƒë∆°n h√†ng m·ªõi nh·∫•t tr∆∞·ªõc
    });
    if (orders.length === 0) {
      return { code: 404, message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o!", data: [] };
    }
    return {
      message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: orders,
    };
  } catch (err) {
    console.log("üöÄ ~ getAllOrdersService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const getOrderDetailService = async (orderId) => {
  try {
    const order = await Order.findOne({
      where: { id: orderId },
      include: [
        {
          model: User,
          attributes: ["id", "username", "email", "phone", "address"], // L·∫•y th√¥ng tin kh√°ch h√†ng
        },
        {
          model: Product,
          attributes: ["id", "name", "price"],

          through: {
            attributes: ["quantity", "price"], // t·ª´ OrderDetail
          },
        },
      ],
    });

    if (!order) {
      console.log("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");

      return { code: 201, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!", data: "" };
    }
    return {
      message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: order,
    };
  } catch (err) {
    console.log("üöÄ ~ getOrderDetailService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const getCartUserService = async (userId) => {
  try {
    const order = await Order.findAll({
      where: { user_id: userId, status: "ƒêang ch·ªçn h√†ng" },
      include: [
        {
          model: Product,
          attributes: ["id", "name", "price", "image"],
          through: {
            attributes: ["quantity", "price"], // t·ª´ OrderDetail
          },
        },
      ],
    });

    if (!order) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");

      return { code: 201, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!", data: "" };
    }
    return {
      message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: order,
    };
  } catch (err) {
    console.log("üöÄ ~ getOrderDetailService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const updateOrderStatusService = async (orderId, newStatus) => {
  try {
    const order = await Order.findByPk(orderId);

    if (!order) {
      return { code: 404, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!", data: "" };
    }
    const validStatuses = [
      "Ch·ªù x√°c nh·∫≠n",
      "ƒê√£ x√°c nh·∫≠n",
      "ƒêang giao h√†ng",
      "ƒê√£ giao h√†ng",
      "ƒê√£ h·ªßy",
    ];
    if (!validStatuses.includes(newStatus)) {
      return {
        code: 400,
        message: "Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!",
        data: "",
      };
    }
    order.status = newStatus;
    await order.save();
    return {
      message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: order,
    };
  } catch (err) {
    console.log("üöÄ ~ updateOrderStatusService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const addToCartService = async (data) => {
  try {
    const { user_id, product_id, quantity, price } = data;

    if (!user_id || !product_id || !quantity || !price) {
      return {
        code: 400,
        message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o",
      };
    }
    let order = await Order.findOne({
      where: {
        user_id,
        status: "ƒêang ch·ªçn h√†ng",
      },
    });
    if (!order) {
      order = await Order.create({
        user_id,
        total: 0, // T·ªïng s·∫Ω ƒë∆∞·ª£c t√≠nh sau
        status: "ƒêang ch·ªçn h√†ng",
        address: "", // C√≥ th·ªÉ b·ªè tr·ªëng ho·∫∑c ƒëi·ªÅn sau
      });
    }

    const product = await Product.findByPk(product_id);
    if (!product) {
      return res
        .status(404)
        .json({ message: `Product with ID ${product_id} not found` });
    }

    let existingDetail = await OrderDetail.findOne({
      where: {
        order_id: order.id,
        product_id,
      },
    });
    let DetailOrder;
    let total = parseFloat(order.total) || 0;

    if (existingDetail) {
      const newQuantity = existingDetail.quantity + quantity;
      const newPrice = price;

      await existingDetail.update({
        quantity: newQuantity,
        price: newPrice,
      });

      DetailOrder = existingDetail;
      total += price * quantity;
    } else {
      DetailOrder = await OrderDetail.create({
        order_id: order.id,
        product_id,
        quantity,
        price,
      });

      total += price * quantity;
    }
    await order.update({ total });

    return {
      message: "th√™m ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: { DetailOrder, order },
    };
  } catch (err) {
    console.log("üöÄ ~ addToCartService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const quickBuyService = async (product, address) => {
  try {
    const { user_id, product_id, quantity, price } = product;

    if (!user_id || !product_id || !quantity || !price) {
      return {
        code: 400,
        message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o",
      };
    }

    let order = await Order.create({
      user_id,
      total: quantity * price, // T·ªïng s·∫Ω ƒë∆∞·ª£c t√≠nh sau
      status: "Ch·ªù x√°c nh·∫≠n",
      address: address, // C√≥ th·ªÉ b·ªè tr·ªëng ho·∫∑c ƒëi·ªÅn sau
    });
    let DetailOrder = await OrderDetail.create({
      order_id: order.id,
      product_id,
      quantity,
      price,
    });

    return {
      message: "th√™m ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: {
        order,
        DetailOrder,
      },
    };
  } catch (err) {
    console.log("üöÄ ~ quickBuyService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const deleteCartService = async (order_id, product_id) => {
  try {
    // L·∫•y chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ t√≠nh to√°n gi√° tr·ªã s·∫£n ph·∫©m b·ªã x√≥a
    const orderDetail = await OrderDetail.findOne({
      where: {
        order_id,
        product_id,
      },
    });

    // N·∫øu kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    if (!orderDetail) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng" });
    }

    // Ki·ªÉm tra n·∫øu gi√° tr·ªã price v√† quantity l√† s·ªë h·ª£p l·ªá
    const price = parseFloat(orderDetail.price);
    const quantity = parseInt(orderDetail.quantity, 10);

    if (isNaN(price) || isNaN(quantity)) {
      return res
        .status(400)
        .json({ message: "Gi√° ho·∫∑c s·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
    }

    // X√≥a chi ti·∫øt ƒë∆°n h√†ng
    const deleted = await OrderDetail.destroy({
      where: {
        order_id,
        product_id,
      },
    });

    // Ki·ªÉm tra k·∫øt qu·∫£ x√≥a
    if (deleted === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng" });
    }

    // L·∫•y t·ªïng gi√° tr·ªã hi·ªán t·∫°i c·ªßa ƒë∆°n h√†ng
    const order = await Order.findOne({
      where: { id: order_id },
    });

    // Ki·ªÉm tra n·∫øu total trong order l√† s·ªë h·ª£p l·ªá
    let currentTotal = parseFloat(order.total);
    if (isNaN(currentTotal)) {
      return res.status(400).json({ message: "T·ªïng ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
    }

    // T√≠nh l·∫°i t·ªïng gi√° tr·ªã ƒë∆°n h√†ng sau khi x√≥a s·∫£n ph·∫©m
    let newTotal = currentTotal - price * quantity;

    // Ki·ªÉm tra n·∫øu newTotal l√† s·ªë h·ª£p l·ªá
    if (isNaN(newTotal) || newTotal < 0) {
      return res
        .status(400)
        .json({ message: "T·ªïng ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá sau khi x√≥a s·∫£n ph·∫©m" });
    }

    // C·∫≠p nh·∫≠t l·∫°i t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    await order.update({ total: newTotal });

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≤n l·∫°i trong ƒë∆°n h√†ng
    const remainingItems = await OrderDetail.count({
      where: { order_id },
    });

    // N·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m n√†o trong ƒë∆°n h√†ng, x√≥a ƒë∆°n h√†ng
    if (remainingItems === 0) {
      await Order.destroy({ where: { id: order_id } });

      return {
        message: `ƒê∆°n h√†ng ${order_id} ƒë√£ ƒë∆∞·ª£c xo√° v√¨ kh√¥ng c√≤n s·∫£n ph·∫©m.`,
        code: 201,
        data: [],
      };
    }

    // Tr·∫£ v·ªÅ th√¥ng b√°o x√≥a th√†nh c√¥ng v√† t·ªïng ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    return {
      message: "Xo√° th√†nh c√¥ng v√† t·ªïng ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      code: 201,
      data: [],
    };
  } catch (err) {
    // B·∫Øt l·ªói h·ªá th·ªëng
    console.log("üöÄ ~ deleteCartService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const statusAfterPaymentService = async (orderId, address) => {
  try {
    const order = await Order.findByPk(orderId);

    if (!order) {
      return { code: 404, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!", data: "" };
    }
    if (order.status !== "ƒêang ch·ªçn h√†ng") {
      return res.status(400).json({ message: "ƒê∆°n h√†ng kh√¥ng th·ªÉ thanh to√°n" });
    }
    order.status = "Ch·ªù x√°c nh·∫≠n";
    order.address = address;
    await order.save();
    return {
      message: "Thanh to√°n th√†nh c√¥ng, ƒë∆°n h√†ng ƒëang ch·ªù x√°c nh·∫≠n",
      code: 201,
      data: order,
    };
  } catch (err) {
    console.log("üöÄ ~ updateOrderStatusService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const getOrderDetailUserService = async (orderId) => {
  try {
    const order = await Order.findAll({
      where: {
        user_id: orderId,

        status: {
          [Op.ne]: "ƒêang ch·ªçn h√†ng",
        },
      },
      attributes: ["id", "total", "order_date", "status"],
      include: [
        {
          model: Product,
          attributes: ["id", "name", "price", "image"],
          through: {
            attributes: ["quantity", "price"],
          },
          include: [
            {
              model: Category,
              attributes: ["name"], // l·∫•y name t·ª´ Category
            },
          ],
        },
      ],
    });

    if (!order) {
      return { code: 201, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!", data: "" };
    }
    return {
      message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: order,
    };
  } catch (err) {
    console.log("üöÄ ~ getOrderDetailUserService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};
const getRevenueService = async () => {
  try {
    let data = await Order.findAll({
      attributes: ["total", "order_date"], // Ch·ªâ l·∫•y c·ªôt 'total' v√† 'order_date'
      where: {
        status: "ƒê√£ giao h√†ng", // ƒêi·ªÅu ki·ªán status l√† 'ƒê√£ giao h√†ng'
      },
    });
    return {
      message: "L·∫•y d·ªØ li·ªáu doanh thu th√†nh c√¥ng!",
      code: 200, // Th∆∞·ªùng l√† 200 cho GET request th√†nh c√¥ng
      data: data,
    };
  } catch (err) {
    // B·∫Øt l·ªói h·ªá th·ªëng
    console.log("üöÄ ~ getRevenueService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

const getAllOrdersByDateService = async (filter) => {
  try {
    let whereClause = {};

    const now = moment();
    if (filter === "day") {
      const startDate = moment().subtract(6, "days").startOf("day"); // 7 ng√†y g·∫ßn nh·∫•t (h√¥m nay + 6 ng√†y tr∆∞·ªõc)
      const endDate = moment().endOf("day");

      whereClause.order_date = {
        [Op.between]: [startDate.toDate(), endDate.toDate()],
      };
    } else if (filter === "month") {
      const startDate = moment().subtract(11, "months").startOf("month"); // 12 th√°ng g·∫ßn nh·∫•t
      const endDate = moment().endOf("month");

      whereClause.order_date = {
        [Op.between]: [startDate.toDate(), endDate.toDate()],
      };
    } else if (filter === "year") {
      // Kh√¥ng c·∫ßn ƒëi·ªÅu ki·ªán - l·∫•y t·∫•t c·∫£
    }

    const orders = await Order.findAll({
      where: whereClause,
      attributes: ["order_date", "total", "status"],
      include: [
        {
          model: Product,
          attributes: ["id", "name", "price", "image"],

          through: {
            attributes: ["quantity", "price"], // t·ª´ OrderDetail
          },
        },
      ],
    });
    if (orders.length === 0) {
      return { code: 404, message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o!", data: [] };
    }
    return {
      message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!",
      code: 201,
      data: orders,
    };
  } catch (err) {
    console.log("üöÄ ~ getAllOrdersByDateService ~ err:", err);
    return {
      message: "L·ªói t·ª´ h·ªá th·ªëng",
      code: 500,
      data: "",
    };
  }
};

module.exports = {
  getAllOrdersService,
  getOrderDetailService,
  updateOrderStatusService,
  getCartUserService,
  addToCartService,
  deleteCartService,
  statusAfterPaymentService,
  getOrderDetailUserService,
  getRevenueService,
  getAllOrdersByDateService,
  quickBuyService,
};
